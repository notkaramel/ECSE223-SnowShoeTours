class Participant {
  Status{
    Idle {
      assignGuide(Guide aGuide)[isGuideAvailable()]
        / {
        doAssignGuide(aGuide); 
      }-> NotPaid;
      
      assignGuide(Guide aGuide)[!isGuideAvailable()]
        / {
        rejectAssignGuide("Guide is unavailable");
        }-> Idle;
      
      // 100% refund
      cancel()
        /{
        doRefund(null);
      } -> Cancelled;
    }
    
    NotPaid {
      pay()[!hasAuthCode()]
        / {
        rejectPayment("Payment not accepted");
      }  -> NotPaid;
      
      pay()[hasAuthCode()]
         -> Paid;
      
      // 100% refund
      cancel()
        / {
        doRefund(null);
      } -> Cancelled;
      
      startTour(Tour aTour)[isTime()]
        / {
        doRefund(null); 
      } -> Cancelled;
    }
    
    Paid {
      // start tour, and it's time to go
      startTour(Tour aTour)[isTime]
        /{
        doStartTour(aTour);
      } -> TourOnGoing;
      
      // start tour, but not time to start yet
      startTour(Tour aTour)[!isTime]
        -> Paid;
      
      // 50% refund
      cancel() /{
        doRefund("50% refund. Participant cancelled before tour starts.");
      } -> Cancelled;
    }
    
    TourOnGoing {
      finish() 
        /{
        doFinishTour();
      } -> TourFinished;
      
      // 10% refund
      cancel() 
        /{
        doRefund("10% refund.");
      }-> Cancelled;
    
    }
    
    TourFinished {}
    
    Cancelled {}
  }
  
  private void doAssignGuide(Guide aGuide){
    getTour().setGuide(aGuide);
  }
  
  private boolean isGuideAvailable() {
    return getTour().getGuide() != null;
  }

  private void rejectAssignGuide(String error){
    throw new RuntimeException(error);
  }

  private void doRefund(Integer refundedPercentage) {
    if(refundedPercentage == null){
      throw new RuntimeException("No penalty, user has not paid");
    }
    else {
      setRefundedPercentageAmount(refundedPercentage);
    }
  }
  
  private boolean hasAuthCode() {
    return getAuthorizationCode() != null;
  }

  private boolean isTime() {
    SnowShowTour = new java.util.Date();
    return d == getTour().startWeek;
  }

}

