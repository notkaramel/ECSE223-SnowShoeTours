class Participant {
  Status{
    NotAssigned {
      assign(Guide aGuide)[isGuideAvailable()]
        / {
        doAssignGuide(aGuide); 
      }-> Assigned;
      
      // no refund penalty
      cancel() /{ doRefund(0);}
      -> Cancelled;
      
      start()[isTime()] /{ doRefund(0);}
      -> Cancelled;
      
      start() -> NotAssigned;
      
      pay() -> NotAssigned;
    }
	// Same as NotPaid
    Assigned{
      pay()[!hasAuthCode()] /{ rejectPayment();}
      -> Assigned;
      
      pay()[hasAuthCode()]
      -> Paid;
      
      // no refund penalty
      start() / { doRefund(0) }
      -> Cancelled;
    }
    
    Paid {
      // start tour, and it's time to go
      start()[isTime()] -> Started;
      
      // start tour, but not time to start yet
      start()[!isTime()] -> Paid;
      
      // 50% refund
      cancel() /{ doRefund(50);}
      -> Cancelled;
      
      pay() -> Paid;
    }
    
    // Tour starts
    Started {
      finish() -> Finished;
      
      // 10% refund
      cancel() /{doRefund(10);}
      -> Cancelled;
		
      pay() -> Started;
      start() -> Started;
    }
    
    Finished {
      start() -> Finished;
      pay() -> Finished;
    }
    
    Cancelled {
      pay() -> Cancelled;
    }
  }

  private void doAssignGuide(Guide aGuide){
    getTour().setGuide(aGuide);
  }
  
  private boolean isGuideAvailable() {
    Guide g = getTour().getGuide();
    return g != null || !g.isEmpty();
  }

  private void rejectAssignGuide(String error){
    throw new RuntimeException(error);
  }

  private void rejectPayment(){
    throw new RuntimeException("Payment not accepted");
  }

  private void doRefund(Integer refundedPercentage) {
  setRefundedPercentageAmount(refundedPercentage);
    }
  
  private boolean hasAuthCode() {
    return getAuthorizationCode() != null && !getAuthorizationCode().isEmpty();
  }

  private boolean isTime() {
    java.util.Date today = new java.util.Date();
    // timeDifference = today - getSnowShoeTour().getStartDate() (using getTime --> in ms)
    long timeDifference = today.getTime() - getSnowShoeTour().getStartDate().getTime();
    // convert ms to weeks
    int weekDifference = (int) timeDifference / (1000*60*60*24*7);

    // isTime = (weekDifference == getTour().getStartWeek())
    return weekDifference == getTour().getStartWeek();
  }
}

