class Participant {
  Status{
    NotAssigned {
      assign(Tour aTour)[hasGuide(aTour)] /{doAssign(aTour);}
        -> Assigned;

      assign(Tour aTour)[!hasGuide(aTour)]
        -> NotAssigned;
      
      // no refund penalty
      cancel() /{ setRefundedPercentageAmount(0);}
      -> Cancelled;
      
      // start() /{ doRefund(0);}
      // -> Cancelled;
      
      start() -> NotAssigned;
      
      pay() -> NotAssigned;
    }
	// Same as NotPaid
    Assigned{
      // pay()[!hasAuthCode()]
      // -> Assigned;
      
      pay()
      -> Paid;
      
      cancel() -> Cancelled;
      // no refund penalty
      start() / {setRefundedPercentageAmount(0);}
      -> Cancelled;
    }
    
    Paid {
      // start tour, and it's time to go
      start() -> Started;
      
      // start tour, but not time to start yet
      //start()[!isTime()] -> Paid;
      
      // 50% refund
      cancel() /{ setRefundedPercentageAmount(50);}
      -> Cancelled;
      
      pay() -> Paid;
    }
    
    // Tour starts
    Started {
      finish() -> Finished;
      
      // 10% refund
      cancel() /{ setRefundedPercentageAmount(10);}
      -> Cancelled;
		
      pay() -> Started;
      start() -> Started;
    }
    
    Finished {
      start() -> Finished;
      pay() -> Finished;
    }
    
    Cancelled {
      pay() -> Cancelled;
    }
  }

  private boolean hasGuide(Tour aTour) {
    return aTour.getGuide() != null && !aTour.getGuide().getName().isEmpty();
  }

  private void doAssign(Tour aTour){
    setTour(aTour);
  }
  
  private boolean hasAuthCode() {
    return getAuthorizationCode() != null && !getAuthorizationCode().isEmpty();
  }
}

