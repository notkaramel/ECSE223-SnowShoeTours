class Participant {
  Status{
    Idle {
      assignGuide(Guide aGuide)[isGuideAvailable()]
        / {
        doAssignGuide(aGuide); 
      }-> NotPaid;
      
      assignGuide(Guide aGuide)[!isGuideAvailable()]
        / {
        rejectAssignGuide("Guide is unavailable");
        }-> Idle;
      
      // 100% refund
      cancel()
        /{
        doRefund(null);
      } -> Cancelled;
    }
    
    NotPaid {
      pay()[!hasAuthCode()]
        / {
        rejectPayment();
      }  -> NotPaid;
      
      pay()[hasAuthCode()]
         -> Paid;
      
      // 100% refund
      cancel()
        / {
        doRefund(null);
      } -> Cancelled;
      
      startTour()[isTime()]
        / {
        doRefund(null); 
      } -> Cancelled;
    }
    
    Paid {
      // start tour, and it's time to go
      startTour()[isTime()]
        /{
        // doStartTour();
      } -> TourOnGoing;
      
      // start tour, but not time to start yet
      startTour()[!isTime()]
        -> Paid;
      
      // 50% refund
      cancel() /{
        doRefund(50);
      } -> Cancelled;
    }
    
    TourOnGoing {
      finish() 
        /{
        // doFinishTour();
      } -> TourFinished;
      
      // 10% refund
      cancel() 
        /{
        doRefund(10);
      }-> Cancelled;
    
    }
    
    TourFinished {}
    
    Cancelled {}
  }

  boolean tourStarted = false;

  private void doAssignGuide(Guide aGuide){
    getTour().setGuide(aGuide);
  }
  
  private boolean isGuideAvailable() {
    return getTour().getGuide() != null;
  }

  private void rejectAssignGuide(String error){
    throw new RuntimeException(error);
  }

  private void rejectPayment(){
    throw new RuntimeException("Payment not accepted");
  }

  private void doRefund(Integer refundedPercentage) {
    if(refundedPercentage == null){
      throw new RuntimeException("No penalty, user has not paid");
    }
    else {
      setRefundedPercentageAmount(refundedPercentage);
    }
  }
  
  private boolean hasAuthCode() {
    return getAuthorizationCode() != null;
  }

  private boolean isTime() {
    java.util.Date today = new java.util.Date();
    // timeDifference = today - getSnowShoeTour().getStartDate() (using getTime --> in ms)
    long timeDifference = today.getTime() - getSnowShoeTour().getStartDate().getTime();
    // convert ms to weeks
    int weekDifference = (int) timeDifference / (1000*60*60*24*7);

    // isTime = (weekDifference == getTour().getStartWeek())
    return weekDifference == getTour().getStartWeek();
  }

  // private void doStartTour() {
  //   getTour().start();
  // }

  // private void doFinishTour() {
  //   getTour().finish();
  // }
}

